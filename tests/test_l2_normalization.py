"""
Test L2 normalization in embedding generation.

This test verifies that all embeddings generated by the MedicalEmbeddingGenerator
are properly L2 normalized to unit vectors.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

import numpy as np
import pytest
from loma_dataset.processor import MedicalEmbeddingGenerator


def test_l2_normalization():
    """Test that generated embeddings are L2 normalized."""
    # Initialize embedding generator
    generator = MedicalEmbeddingGenerator("AleksanderObuchowski/medembed-small-onnx")
    
    try:
        generator.initialize()
    except Exception as e:
        pytest.skip(f"Could not initialize embedding generator: {e}")
    
    # Test texts
    test_texts = [
        "What are the symptoms of diabetes?",
        "How is hypertension treated?",
        "What causes heart disease?",
        "Medical research shows that early intervention improves outcomes.",
        ""  # Edge case: empty string
    ]
    
    # Generate embeddings
    embeddings = generator.generate_embeddings(test_texts)
    
    # Verify L2 normalization
    for i, embedding in enumerate(embeddings):
        if len(embedding) > 0:  # Skip empty embeddings
            # Convert to numpy array
            vec = np.array(embedding, dtype=np.float32)
            
            # Calculate L2 norm
            norm = np.linalg.norm(vec)
            
            # Check if norm is approximately 1 (allowing for floating point precision)
            assert abs(norm - 1.0) < 1e-6, f"Embedding {i} is not L2 normalized. Norm: {norm}"
            
            print(f"✅ Embedding {i}: L2 norm = {norm:.8f}")


def test_cosine_similarity_with_normalized_vectors():
    """Test that cosine similarity works correctly with L2 normalized vectors."""
    # Create test vectors
    vec1 = np.array([1.0, 0.0, 0.0])
    vec2 = np.array([0.0, 1.0, 0.0])
    vec3 = np.array([1.0, 0.0, 0.0])  # Same as vec1
    
    # L2 normalize them (they're already normalized in this case)
    vec1 = vec1 / np.linalg.norm(vec1)
    vec2 = vec2 / np.linalg.norm(vec2)
    vec3 = vec3 / np.linalg.norm(vec3)
    
    # Test cosine similarity
    # For normalized vectors, cosine similarity = dot product
    similarity_12 = np.dot(vec1, vec2)  # Should be 0 (orthogonal)
    similarity_13 = np.dot(vec1, vec3)  # Should be 1 (identical)
    
    assert abs(similarity_12 - 0.0) < 1e-6, f"Expected 0, got {similarity_12}"
    assert abs(similarity_13 - 1.0) < 1e-6, f"Expected 1, got {similarity_13}"
    
    print(f"✅ Cosine similarity test passed")
    print(f"   Orthogonal vectors: {similarity_12:.8f}")
    print(f"   Identical vectors: {similarity_13:.8f}")


if __name__ == "__main__":
    print("Testing L2 normalization...")
    test_l2_normalization()
    print("\nTesting cosine similarity with normalized vectors...")
    test_cosine_similarity_with_normalized_vectors()
    print("\n✅ All tests passed!")